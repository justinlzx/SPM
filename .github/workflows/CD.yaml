name: CI Pipeline

on:
  push:
    branches: ["main"]
    paths:
      # frontend files
      - "frontend/src/**"
      - "frontend/public/**"
      - "frontend/package.json"
      - "frontend/Dockerfile"
      - "frontend/tailwind.config.js"
      - "frontend/tsconfig.json"

      # backend files
      - "backend/src/**"
      - "backend/requirements.prod.txt"
      - "backend/Dockerfile"
      - "backend/main.py"

      - "docker-compose.yaml"
      - ".github/workflows/CD.yaml"

env:
  TELEGRAM_GROUP_ID: ${{ secrets.TELE_CHAT_ID }}
  TELEGRAM_TOPIC_ID: ${{ secrets.TELE_TOPIC_ID }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELE_TOKEN }}

jobs:
  build:
    environment: production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: .

      - name: Set up
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Create pip cache directory
        run: |
          mkdir -p ~/.cache/pip
          chmod -R 777 ~/.cache/pip

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Ensure frontend .env exists
        run: |
          if [ ! -f "frontend/.env" ]; then
            echo "Creating .env file..."
            touch frontend/.env
            echo "REACT_APP_BACKEND_URL=${{ vars.REACT_APP_BACKEND_URL }}" >> frontend/.env
          fi

      - name: Ensure backend .env exists
        run: |
          if [ ! -f "backend/.env" ]; then
            echo "Creating .env file..."
            touch backend/.env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> backend/.env
            echo "AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}" >> backend/.env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> backend/.env
            echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> backend/.env
            echo "SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}" >> backend/.env
            echo "TOKEN_SECRET=${{ secrets.TOKEN_SECRET }}" >> backend/.env
            echo "ENV=${{ vars.ENV}}" >> backend/.env
            echo "FRONTEND_URL=${{ vars.FRONTEND_URL}}" >> backend/.env
            echo "SMTP_PORT=${{ vars.SMTP_PORT}}" >> backend/.env
            echo "SMTP_SERVER=${{ vars.SMTP_SERVER}}" >> backend/.env
          fi

      - name: Build and push
        run: |
          docker compose -f docker-compose.yaml build
          docker compose -f docker-compose.yaml push

  deploy:
    environment: production
    runs-on: self-hosted
    continue-on-error: true
    if: ${{needs.build.result == 'success'}}
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: .
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Create backend env files
        run: |
          echo "Creating backend .env..."
          cat > backend/.env << EOF
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
          TOKEN_SECRET=${{ secrets.TOKEN_SECRET }}
          ENV=${{ vars.ENV}}
          FRONTEND_URL=${{ vars.FRONTEND_URL}}
          SMTP_PORT=${{ vars.SMTP_PORT}}
          SMTP_SERVER=${{ vars.SMTP_SERVER}}
          EOF

      - name: Create frontend env files
        run: |
          echo "Creating backend .env..."
          cat > frontend/.env << EOF
          REACT_APP_BACKEND_URL=${{ vars.REACT_APP_BACKEND_URL }}
          EOF

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker images
        run: docker compose pull

      - name: Clean old images
        run: docker image prune -f

      - name: Deploy to production
        run: docker compose -f docker-compose.yaml up -d

  notify:
    environment: production
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: .

      - name: send custom message
        uses: PacificPromise/macos-telegram-action@main
        with:
          type: topic # group | topic | channel
          message: |
            🚀 Deployment Update

            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Overall Status: ${{ (needs.build.result == 'success' && needs.deploy.result == 'success') && 'Success ✅' || 'Failed ❌' }}
                        
            Triggered by: ${{ github.actor }}

            View Commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}


            📝 Workflow Results:
            Build: ${{ needs.build.result  == 'success' && 'Success ✅' || 'Failed ❌' }}
            Deploy: ${{ needs.deploy.result == 'success' && 'Success ✅' || needs.deploy.result == 'skipped' && 'Skipped 🚫' || needs.deploy.result == 'failure' && 'Failed ❌' || needs.deploy.result }}

            View Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
